function n8roi2
%Finds multiple rois in single image (ie, cells) and saves in
%NOTES.ROI (3D logical array)
%only works with N4 arrays
%assumes ROIs stationary across time

global DATA NOTES

%% Check dimensions
%dimension sizes
d=NOTES.Dimensions{1};
%3D data?
D3=all(d(1:3)>1);
D58=any(d(5:8)>1);
%set depth index=1
d3=1;
%set "other" dims 5-8 to 1
d58=1;

%% Figure
%window
f1a=figure('Units','normalized',...
    'Outerposition',[0 0 1 1],...
    'Color',[0.1 0.1 0.1],...
    'ToolBar','none');
set(f1a,'Colormap',gray);
%axes
ha = tight_subplot(1,1,0,[0.01 0.01],0);
%default parameters for thresholding
v(1)=0.1; %threshold
v(2)=50;  %spixel area lower threshold
v(3)=1e3; %spixel area upper threshold
v(4)=50;  %major axis length
v(5)=0.9;  %eccentricity
%plots
im=imagesc([]);
axis image off;
hold on;

%% GUI for data, transformation
%data type
b1(1) = uicontrol(gcf,'Style','popup',...
    'String',NOTES.Fields,...
    'FontWeight','bold',...
    'FontSize',18,...
    'Value',NOTES.CurrentField,...
    'Units','normalized',...
    'Position',[0.932 0.94 0.06 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)newdata(obj,evt));
%transformation
string={'Variance' 'Max-Min' 'Mean'};
b1(2) = uicontrol(gcf,'Style','popup',...
    'String',string,...
    'Value',1,...
    'FontSize',14,...
    'Units','normalized',...
    'Position',[0.932 0.905 0.06 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)newdata(obj,evt));
%invert
b1(3) = uicontrol(gcf,'Style','togglebutton',...
    'String','-',...
    'FontSize',16,...
    'FontWeight','bold',...
    'Units','normalized',...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Position',[0.912 0.955 0.02 0.035],...
    'Callback',@(obj,evt)newdata(obj,evt));

%% Next ROI
%save/next
b2 = uicontrol(gcf,'Style','pushbutton',...
    'String','Save',...
    'FontSize',14,...
    'Units','normalized',...
    'Position',[0.932 0.87 0.06 0.045],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@savenext);
if D3
    d3str = uicontrol(gcf,'Style','text',...
        'string',['Depth 1/' num2str(NOTES.Dimensions{1}(3))],...
        'FontSize',14,...
        'BackgroundColor',[0.1 0.1 0.1],...
        'ForegroundColor',[0.5 0.5 0.5],...
        'Units','normalized',...
        'Position',[0.932 0.825 0.06 0.04]);
    set(b2,'string','Next');
end
if D58
    d58str = uicontrol(gcf,'Style','text',...
        'string',['Other 1/' num2str(prod(d(5:8)))],...
        'FontSize',14,...
        'BackgroundColor',[0.1 0.1 0.1],...
        'ForegroundColor',[0.5 0.5 0.5],...
        'Units','normalized',...
        'Position',[0.932 0.78 0.06 0.04]);
    set(b2,'string','Next');
end

%% GUIs for thresholding (Step 1)
%Lock threshold parameters
b3 = uicontrol(gcf,'Style','togglebutton',...
    'String','Lock',...
    'FontSize',14,...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.01 0.941 0.05 0.049],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)lock(obj,evt));
%Theshold
b4(1) = uicontrol(gcf,'Style','edit',...
    'String',v(1),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',1,...
    'Position',[0.01 0.89 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(1) = uicontrol(gcf,'Style','text',...
    'string','Threshold',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'Units','normalized',...
    'Position',[0.062 0.89 0.05 0.036]);
%Min ROI size
b4(2) = uicontrol(gcf,'Style','edit',...
    'String',v(2),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',1,...
    'Position',[0.01 0.84 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(2) = uicontrol(gcf,'Style','text',...
    'string','Min size',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'Units','normalized',...
    'Position',[0.062 0.84 0.05 0.036]);
%Max ROI size
b4(3) = uicontrol(gcf,'Style','edit',...
    'String',v(3),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',1,...
    'Position',[0.01 0.79 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(3) = uicontrol(gcf,'Style','text',...
    'string','Max size',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'Units','normalized',...
    'Position',[0.062 0.79 0.05 0.036]);
%Major Axis length
b4(4) = uicontrol(gcf,'Style','edit',...
    'String',v(4),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',1,...
    'Position',[0.01 0.74 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(4) = uicontrol(gcf,'Style','text',...
    'string','Major axis',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'Units','normalized',...
    'Position',[0.062 0.74 0.05 0.036]);
%Eccentricity
b4(5) = uicontrol(gcf,'Style','edit',...
    'String',v(5),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',1,...
    'Position',[0.01 0.69 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(5) = uicontrol(gcf,'Style','text',...
    'string','Eccentricity',...
    'FontSize',14,...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'HorizontalAlignment','left',...
    'Units','normalized',...
    'Position',[0.062 0.69 0.06 0.036]);

%% GUIs for user adjustments (step 2)
%Add/remove ROI
b5 = uicontrol(gcf,'Style','togglebutton',...
    'String','+',...
    'FontSize',26,...
    'Units','normalized',...
    'Position',[0.07 0.94 0.04 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Visible','off',...
    'Callback',@(obj,evt)targetroi(obj,evt));
%Split ROI
b6 = uicontrol(gcf,'Style','togglebutton',...
    'String','OO',...
    'FontSize',14,...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.07 0.89 0.04 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Visible','off',...
    'Callback',@(obj,evt)targetroi(obj,evt));

%% File name
%file name
uicontrol(gcf,'Style','text',...
    'String',NOTES.SaveString,...
    'FontSize',14,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Units','normalized',...
    'Position',[0.01 0 0.2 0.03],...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.4 0.4 0.4]);

%% Initialize data
%data
data=[]; %data pulled with 'newdata' function below
%load any existing ROIs
if isempty(NOTES.ROI)
    %get new data
    newdata;
    %get new ROI
    updateroi;
    %save new ROI
    newROI=true;
else
    ROI=NOTES.ROI(:,:,d3);
    %lock threshold buttons
    set(b3,'value',1);
    lock;
    %get new data
    newdata;
    plotdata;
    newROI=false;
end
%im height (to correct for weird image indices in matlab)
imy=size(data,1); %dim1=Yaxis
%to break loop when adding rois
inloop=false;
    
%% Functions
    function newdata(src,evt)
        %check button values
        checkvals;
        %get data/transform choices
        NOTES.CurrentField=get(b1(1),'value');
        transform = get(b1(2),'value');
        %pull data from globals
        cf=NOTES.Fields{NOTES.CurrentField};
        if transform == 1
            %variance
            eval(['data=var(single(DATA.' cf '),[],4);']);
        elseif transform == 2
            %max-min
            eval(['data=max(DATA.' cf ',[],4)-min(DATA.' cf ',[],4);']);
        elseif transform == 3
            eval(['data=nanmean(abs(DATA.' cf '),4);']);
        end
        if get(b1(3),'value')==1
            data=-data;
        end
        %collapse 3rd spatial dim and "other" dim5-8
        [d5,d6,d7,d8]=ind2sub(d(5:8),d58);
        if D3
            data=data(:,:,d3,1,d5,d6,d7,d8);
        else
            data=data(:,:,:,1,d5,d6,d7,d8);
        end 
        data=squeeze(data);
        %make double
        data=double(data);
        %normalize
        data=data-min(data(:));
        data=data./max(data(:));
        %recalculate default thresh
        thr=nanmean(data(:))+nanstd(data(:));
        thr=round(thr*10)/10;
        %reset threshold vals
        v(1)=thr;
        if thr==0
            thr=0.1;
        end
        set(b4(1),'string',thr);
        %get new ROI if changing data type
        if nargin>0
            if src==b1(1) || src==b1(2) || src==b1(3) || src==b2
                updateroi;
                plotdata;
            end
        end
    end
    function checkvals
        %get gui values
        for i=1:length(b4)
            v(i)=str2double(get(b4(i),'string'));
        end
    end
    function plotdata
        %increase brightness at ROIs
        pdata=data;
        pdata(ROI)=pdata(ROI)*3;
        %plot data
        im.CData=pdata;
    end
    function updateroi(src,evt)
        %check gui values
        checkvals;
        %reset roi
        ROI=data>v(1);
        %remove small blobs
        ROI = bwareaopen(ROI,v(2));
        %remove large blobs
        ROI = bwareaopen2(ROI,'Area',v(3));
        %remove long blobs
        ROI = bwareaopen2(ROI,'MajorAxisLength',v(4));
        %remove long blobs
        ROI = bwareaopen2(ROI,'Eccentricity',v(5));
        plotdata;
    end
    function lock(src,evt)
        %get state
        l=get(b3,'value');
        if l==1 %go to step2 (user adjustments)
            %lock gui for thresholding
            set(b1(:),'enable','off');
            set(b4(:),'enable','off');
            set(an(:),'visible','off');
            %show extra buttons
            set(b5,'visible','on');
            set(b6,'visible','on');
        else   %go back to step 1 (automatic thresholding parameters)
            %unlock gui for thresholding
            set(b1(:),'enable','on');
            set(b4(:),'enable','on');
            set(an(:),'visible','on');
            %hide extra buttons
            set(b5,'visible','off');
            set(b6,'visible','off');
        end
    end
    function targetroi(src,evt)
        %addroiyes and inloop prevent recursive function calling
        if ~inloop
            inloop=true;
            while inloop
                %get cursor position/button press
                [ix(2),ix(1),button] = ginput(1);
                %stop if right click (button=3) or esc (button=27)
                if button==3 || button==27 || ~inloop
                    break;
                end                
                %in or out of roi?
                ix=round(ix);
                ix(1)=imy-ix(1)+1;
                %stop if outside axis bounds
                try
                    inroi=ROI(ix(1),ix(2));
                catch
                    break;
                end
                %add/remove region
                if inroi
                    %get object #
                    roi=bwlabel(ROI);
                    nobj=roi(ix(1),ix(2));
                    if src==b5 %(+ button)
                        %delete object 
                        roi(roi==nobj)=0;
                    elseif src==b6  %(oo button)
                        %isolate object in new roi
                        roi2=roi==nobj;
                        %delete old object
                        roi(roi==nobj)=0;
                        %split into multiple objects (allow 1/2 of min size)
                        roi2=splitroi(data,roi2,round(v(2)/2));
                        %add split objects to roi
                        roi(roi2)=1;
                    end
                    %return ROI or binary
                    ROI=roi>0;
                else
                    if src==b5 %only for + button
                        %if above threshold, just add object
                        if data(ix(1),ix(2))>v(1)
                            roi=data>v(1);
                            roi=bwlabel(roi);
                            nobj=roi(ix(1),ix(2));
                            roi=roi==nobj;
                            ROI(roi)=true;
                        else
                            %otherwise, use:
                            roi=addroi(data,ix);
                            %add object to ROI
                            ROI(roi)=true;
                        end
                    end
                end
                %replot
                plotdata;
            end
            %reset inloop and toggles
            pause(0.5); %pause in case user presses button again while still in loop
            inloop=false;
            set(b5,'value',0);
            set(b6,'value',0);
        end
    end
    function savenext(src,evt)
        if d3<d(3) || d58<prod(d(5:8))
            %save current ROI
            [d5,d6,d7,d8]=ind2sub(d(5:8),d58);
            NOTES.ROI(:,:,d3,1,d5,d6,d7,d8)=ROI;
            %go to next dim (cycle through depths first)
            if d3<d(3)
                d3=d3+1;
            else
                d58=d58+1;
            end                
            %update strings
            if D3
                set(d3str,'string',['Depth ' num2str(d3) '/' num2str(d(3))]);
            end
            if D58
                set(d58str,'string',['Other ' num2str(d58) '/' num2str(prod(d(5:8)))]);
            end
            %last dim?
            if d3==d(3) && d58==prod(d(5:8))
                set(b2,'string','Done');
            end
            %get fresh data at new depth
            newdata;
            if newROI
                updateroi;
            else
                try
                    [d5,d6,d7,d8]=ind2sub(d(5:8),d58);
                    ROI=logical(NOTES.ROI(:,:,d3,1,d5,d6,d7,d8));
                catch
                    updateroi;
                end
            end
            plotdata;
        else
            [d5,d6,d7,d8]=ind2sub(d(5:8),d58);
            NOTES.ROI(:,:,d3,1,d5,d6,d7,d8)=logical(ROI);
            clc;
            close(f1a);
            disp('ROI saved in NOTES.ROI');
            disp(' ');
            pause(0.5);
            n8plot2;
        end
    end
end