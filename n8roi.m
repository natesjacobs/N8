function n8roi
%Finds multiple rois in single image (ie, cells) and saves in
%NOTES.ROI (3D logical array)
%only works with N4 arrays
%assumes ROIs stationary across time

global DATA NOTES

%% Check dimensions
%dimension sizes
d=NOTES.Dimensions{1};
%3D data?
D3=all(d(1:3)>1);
%other dims?
D58=any(d(5:8)>1);
%set depth index=1
d3=1;
%set "other" dims 5-8 to 1
d58=1;

%% Figure
%window
f1a=figure('Units','normalized',...
    'Outerposition',[0 0 1 1],...
    'Color',[0.1 0.1 0.1],...
    'ToolBar','none');
set(f1a,'Colormap',gray);
%axes
ha = tight_subplot(1,1,0,[0.01 0.01],0);
%default parameters for thresholding
v(1)=0.5; %SA/vol ratio
v(2)=50;  %pixel area lower threshold
v(3)=250; %pixel area upper threshold
v(4)=50;  %major axis length
v(5)=0.9;  %eccentricity
%plots
im=imagesc([]);
caxis([0 1]);
axis image off;
hold on;

%% GUI for data, transformation
%data type
b1(1) = uicontrol(gcf,'Style','popup',...
    'String',NOTES.Fields,...
    'FontWeight','bold',...
    'FontSize',18,...
    'Value',NOTES.CurrentField,...
    'Units','normalized',...
    'Position',[0.932 0.94 0.06 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)newdata(obj,evt));
%transformation
string={'Variance' 'Max-Min' 'Mean'};
b1(2) = uicontrol(gcf,'Style','popup',...
    'String',string,...
    'Value',1,...
    'FontSize',16,...
    'Units','normalized',...
    'Position',[0.932 0.905 0.06 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)newdata(obj,evt));
%invert
b1(3) = uicontrol(gcf,'Style','togglebutton',...
    'String','invert',...
    'FontSize',12,...
    'Units','normalized',...
    'Position',[0.932 0.89 0.06 0.03],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)newdata(obj,evt));

%% Next ROI
%save/next
b2 = uicontrol(gcf,'Style','pushbutton',...
    'String','Save',...
    'FontWeight','bold',...
    'FontSize',14,...
    'Units','normalized',...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Position',[0.932 0.81 0.06 0.05],...
    'Callback',@savenext);
if D3
    d3str = uicontrol(gcf,'Style','text',...
        'string',['Depth 1/' num2str(NOTES.Dimensions{1}(3))],...
        'FontSize',14,...
        'BackgroundColor',[0.1 0.1 0.1],...
        'ForegroundColor',[0.5 0.5 0.5],...
        'Units','normalized',...
        'Position',[0.932 0.825 0.06 0.04]);
    set(b2,'string','Next');
end
if D58
    d58str = uicontrol(gcf,'Style','text',...
        'string',['Other 1/' num2str(prod(d(5:8)))],...
        'FontSize',14,...
        'BackgroundColor',[0.1 0.1 0.1],...
        'ForegroundColor',[0.5 0.5 0.5],...
        'Units','normalized',...
        'Position',[0.932 0.78 0.06 0.04]);
    set(b2,'string','Next');
end

%% GUIs for add/clear
%Add rois
b3a = uicontrol(gcf,'Style','pushbutton',...
    'String','add rois',...
    'FontSize',12,...
    'FontWeight','bold',...
    'Units','normalized',...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Position',[0.01 0.945 0.05 0.045],...
    'Callback',@(obj,evt)addroiset(obj,evt));
%Clear all rois
b3b = uicontrol(gcf,'Style','pushbutton',...
    'String','Clear',...
    'FontSize',14,...
    'FontWeight','bold',...
    'Units','normalized',...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Position',[0.932 0.76 0.06 0.05],...
    'Callback',@(obj,evt)addroiset(obj,evt));

%% GUIs for threshold parameters
%Region props
b4(1) = uicontrol(gcf,'Style','edit',...
    'String',v(1),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',v(1),...
    'Position',[0.01 0.89 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(1) = uicontrol(gcf,'Style','text',...
    'string','SA / Vol',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'Units','normalized',...
    'Position',[0.062 0.89 0.05 0.036]);
%Min ROI size
b4(2) = uicontrol(gcf,'Style','edit',...
    'String',v(2),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',1,...
    'Position',[0.01 0.84 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(2) = uicontrol(gcf,'Style','text',...
    'string','Min size',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'Units','normalized',...
    'Position',[0.062 0.84 0.05 0.036]);
%Max ROI size
b4(3) = uicontrol(gcf,'Style','edit',...
    'String',v(3),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',1,...
    'Position',[0.01 0.79 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(3) = uicontrol(gcf,'Style','text',...
    'string','Max size',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'Units','normalized',...
    'Position',[0.062 0.79 0.05 0.036]);
%Major Axis length
b4(4) = uicontrol(gcf,'Style','edit',...
    'String',v(4),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',1,...
    'Position',[0.01 0.74 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(4) = uicontrol(gcf,'Style','text',...
    'string','Major axis',...
    'FontSize',14,...
    'HorizontalAlignment','left',...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'Units','normalized',...
    'Position',[0.062 0.74 0.05 0.036]);
%Eccentricity
b4(5) = uicontrol(gcf,'Style','edit',...
    'String',v(5),...
    'FontSize',14,...
    'Units','normalized',...
    'Value',1,...
    'Position',[0.01 0.69 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)updateroi(obj,evt));
an(5) = uicontrol(gcf,'Style','text',...
    'string','Eccentricity',...
    'FontSize',14,...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.5 0.5 0.5],...
    'HorizontalAlignment','left',...
    'Units','normalized',...
    'Position',[0.062 0.69 0.06 0.036]);

%% GUIs for user adjustments (step 2)
%Add/remove ROI
b5 = uicontrol(gcf,'Style','togglebutton',...
    'String','+',...
    'FontSize',28,...
    'Units','normalized',...
    'Position',[0.01 0.58 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)targetroi(obj,evt));
%Split ROI
b6 = uicontrol(gcf,'Style','togglebutton',...
    'String','OO',...
    'FontSize',16,...
    'FontWeight','bold',...
    'Units','normalized',...
    'Position',[0.01 0.63 0.05 0.05],...
    'BackgroundColor',[0.82 0.82 0.82],...
    'Callback',@(obj,evt)targetroi(obj,evt));

%% File name
%file name
uicontrol(gcf,'Style','text',...
    'String',NOTES.SaveString,...
    'FontSize',14,...
    'FontWeight','bold',...
    'HorizontalAlignment','left',...
    'Units','normalized',...
    'Position',[0.01 0 0.2 0.03],...
    'BackgroundColor',[0.1 0.1 0.1],...
    'ForegroundColor',[0.4 0.4 0.4]);

%% Initialize data
%data
data=[]; %data pulled with 'newdata' function below
ROI=false(size(NOTES.CurrentROI));
%load any existing ROIs
if isempty(NOTES.ROI)
    %get new data
    newdata;
    %get new ROI
    updateroi;
    %save new ROI
    newROI=true;
else
    NOTES.CurrentROI=NOTES.ROI(:,:,d3);
    %get new data
    newdata;
    plotdata;
    newROI=false;
end
%to break loop when adding rois
inloop=false;
    
%% Functions
    function newdata(src,evt)
        %check button values
        checkvals;
        %get data/transform choices
        NOTES.CurrentField=get(b1(1),'value');
        transform = get(b1(2),'value');
        %pull data from globals
        cf=NOTES.Fields{NOTES.CurrentField};
        if transform == 1
            %variance
            eval(['data=var(single(DATA.' cf '),[],4);']);
        elseif transform == 2
            %max-min
            eval(['data=max(DATA.' cf ',[],4)-min(DATA.' cf ',[],4);']);
        elseif transform == 3
            eval(['data=nanmean(abs(DATA.' cf '),4);']);
        end
        if get(b1(3),'value')==1
            data=-data;
        end
        %collapse 3rd spatial dim and "other" dim5-8
        [d5,d6,d7,d8]=ind2sub(d(5:8),d58);
        if D3
            data=data(:,:,d3,1,d5,d6,d7,d8);
        else
            data=data(:,:,:,1,d5,d6,d7,d8);
        end 
        data=squeeze(data);
        %make double
        data=double(data);
        %normalize
        data=data-min(data(:));
        data=data./quantile(data(:),0.99);
        %refresh plot
        updateroi;
    end
    function checkvals
        %get gui values
        for i=1:length(b4)
            v(i)=str2double(get(b4(i),'string'));
        end
    end
    function plotdata
        pdata=data;
        %increase brightness at new ROIs
        %pdata(ROI)=pdata(ROI)*3;
        pdata(ROI)=1;
        %set brightness at perm ROIs to 0
        pdata(NOTES.CurrentROI)=0;
        %plot data
        im.CData=pdata;
    end
    function updateroi(src,evt)
        %check gui values
        checkvals;
        %clear current ROI
        ROI=false(size(data));
        %cycle through thresholds
        for i=0:0.05:1.1
            roi = data>i;
            %remove blobs with high S.A./vol ratio
            roi = bwareaopen2(roi,'SAV',v(1));
            %remove small blobs
            roi = bwareaopen(roi,v(2));
            %remove large blobs
            roi = bwareaopen2(roi,'Area',v(3));
            %remove long blobs
            roi = bwareaopen2(roi,'MajorAxisLength',v(4));
            %remove long blobs
            roi = bwareaopen2(roi,'Eccentricity',v(5));
            %add to ROI
            ROI(roi)=true;
        end
        %replot data
        plotdata;
    end
    function addroiset(src,evt)
        if src==b3a
            NOTES.CurrentROI(ROI)=true;
        elseif src==b3b
            NOTES.CurrentROI(:)=false;
        end
        updateroi;
    end 
    function targetroi(src,evt)
        %addroiyes and inloop prevent recursive function calling
        if ~inloop
            inloop=true;
            while inloop
                %get cursor position/button press
                [ix(2),ix(1),button] = ginput(1);
                %stop if right click (button=3) or esc (button=27)
                if button==3 || button==27 || ~inloop
                    break;
                end
                %in or out of roi?
                ix=round(ix);
                %stop if outside axis bounds
                try
                    inroi=ROI(ix(1),ix(2));
                catch
                    break;
                end
                %add/remove region
                if inroi
                    %get object #
                    roi=bwlabel(ROI);
                    nobj=roi(ix(1),ix(2));
                    if src==b5 %(+ button)
                        %delete object
                        roi(roi==nobj)=0;
                    elseif src==b6  %(oo button)
                        %isolate object in new roi
                        roi2=roi==nobj;
                        %delete old object
                        roi(roi==nobj)=0;
                        %split into multiple objects (allow 1/2 of min size)
                        roi2=splitroi(data,roi2,round(v(2)/2));
                        %add split objects to roi
                        roi(roi2)=1;
                    end
                    %return ROI or binary
                    ROI=roi>0;
                else
                    if src==b5 %only for + button
                        roi=addroi(data,ix,v(3));
                        %add object to ROI
                        ROI(roi)=true;
                    end
                end
                %replot
                plotdata;
            end
            %reset inloop and toggles
            pause(0.5); %pause in case user presses button again while still in loop
            inloop=false;
            set(b5,'value',0);
            set(b6,'value',0);
        end
    end
    function savenext(src,evt)
        if d3<d(3) || d58<prod(d(5:8))
            %save current ROI
            [d5,d6,d7,d8]=ind2sub(d(5:8),d58);
            NOTES.ROI(:,:,d3,1,d5,d6,d7,d8)=ROI;
            %go to next dim (cycle through depths first)
            if d3<d(3)
                d3=d3+1;
            else
                d58=d58+1;
            end                
            %update strings
            if D3
                set(d3str,'string',['Depth ' num2str(d3) '/' num2str(d(3))]);
            end
            if D58
                set(d58str,'string',['Other ' num2str(d58) '/' num2str(prod(d(5:8)))]);
            end
            %last dim?
            if d3==d(3) && d58==prod(d(5:8))
                set(b2,'string','Done');
            end
            %get fresh data at new depth
            newdata;
            if newROI
                updateroi;
            else
                try
                    [d5,d6,d7,d8]=ind2sub(d(5:8),d58);
                    ROI=logical(NOTES.ROI(:,:,d3,1,d5,d6,d7,d8));
                catch
                    updateroi;
                end
            end
            plotdata;
        else
            %save current roi
            NOTES.CurrentROI(ROI)=true;
            %save into permanent ROI
            [d5,d6,d7,d8]=ind2sub(d(5:8),d58);
            NOTES.ROI(:,:,d3,1,d5,d6,d7,d8)=logical(NOTES.CurrentROI);
            clc;
            close(f1a);
            disp('ROI saved in NOTES.ROI');
            disp(' ');
            n8plot2;
        end
    end
end